{"version":3,"sources":["components/Header.js","components/ExpensesForm.js","components/RowExpen.js","components/ListExpens.js","components/Budget.js","helper.js","components/Remaining.js","components/BudgetControl.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","title","ExpensesFrom","gastoNombreRef","React","createRef","cantidadGastoRef","newExpens","e","preventDefault","_this","current","value","expens","gastoNombre","cantidadGasto","console","log","addExpens","currentTarget","reset","onSubmit","this","ref","id","type","htmlFor","Component","RowExpen","_this$props$expen","expen","ListExpens","Object","keys","map","key","components_RowExpen","Budget","budget","validateBudget","parseInt","checkBudget","remaning","Remaining","_this$props","remaining","concat","BudgetControl","Fragment","components_Budget","components_Remaining","App","state","getBudget","prompt","setState","objectSpread","Date","now","subtractExpense","expense","subtract","Number","components_Header","ExpensesForm","components_ListExpens","components_BudgetControl","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f97d122.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = (props) => {\n    return(\n        <header className='green lighten-1'>\n            <h1 className='obj-title'> {props.title} </h1>\n        </header>\n    )\n}\nexport default Header\n","import React, { Component } from 'react'\n\nclass ExpensesFrom extends Component{\n\n    //ref\n\n    gastoNombreRef = React.createRef()\n    cantidadGastoRef = React.createRef()\n\n    newExpens = (e) => {\n        e.preventDefault()\n        //validar campos\n        if(this.gastoNombreRef.current.value !== '' && this.cantidadGastoRef.current.value !== ''){\n\n            // crear objeto\n            let expens = {\n                gastoNombre: this.gastoNombreRef.current.value,\n                cantidadGasto: this.cantidadGastoRef.current.value\n            }\n\n            console.log(expens)\n            //enviarlo a las props\n            this.props.addExpens(expens)\n\n            //reset\n            e.currentTarget.reset()\n        }\n\n\n    }\n\n    render(){\n        return(\n            <form onSubmit={this.newExpens}>\n                <div className=\"row\">\n                    <div className=\"input-field col s12\">\n                        <input ref={this.gastoNombreRef} id=\"gastoNombre\" type=\"text\" className=\"validate\"/>\n                        <label htmlFor=\"gastoNombre\">Nombre del gasto</label>\n                    </div>\n                    <div className=\"input-field col s12\">\n                        <input ref={this.cantidadGastoRef} id=\"cantidadGasto\" type=\"text\" className=\"validate\" />\n                        <label htmlFor=\"cantidadGasto\">Cantidad gastada</label>\n                    </div>\n                    <div className=\"col s6 offset-s3\">\n                        <button className=\"waves-effect waves-light btn green lighten-1 col s12\">Agregar</button>\n                    </div>\n                </div>\n            </form>\n        )\n    }\n}\nexport default ExpensesFrom\n","import React, {Component} from 'react'\n\nclass RowExpen extends Component {\n    render(){\n        const {gastoNombre, cantidadGasto} = this.props.expen\n\n        return(\n            <tr>\n                <td>{gastoNombre}</td>\n                <td>${cantidadGasto}</td>\n            </tr>\n        )\n    }\n}\n\nexport default RowExpen\n","import React, { Component } from 'react'\nimport RowExpen from './RowExpen'\n\nclass ListExpens extends Component{\n    render(){\n        return(\n            <table className=\"striped\">\n                <thead>\n                  <tr>\n                      <th>Gasto</th>\n                      <th>Monto</th>\n                  </tr>\n                </thead>\n\n                <tbody>\n                    { Object.keys( this.props.expens ).map( key => (\n                        <RowExpen\n                            key={key}\n                            expen={this.props.expens[key]}\n                        />\n                    ) ) }\n                </tbody>\n            </table>\n        )\n    }\n}\n\nexport default ListExpens\n","import React, { Component } from 'react'\n\nclass Budget extends Component{\n    render(){\n        return(\n\n            <div className='item green lighten-2'>\n                Presupuesto\n                <span className='value-number'>${this.props.budget}</span>\n            </div>\n\n        )\n    }\n}\n\nexport default Budget\n","export const validateBudget = budget => {\n    let totalBudget = parseInt(budget, 10) || 0\n\n    if( totalBudget > 0 ) {\n        return 'totalBudget'\n    } else {\n        return false\n    }\n}\n\nexport const checkBudget = (budget, remaning) => {\n    let changeClass\n\n    if( (budget / 4) > remaning ) {\n        changeClass = 'red'\n    } else if( (budget / 2) > remaning ) {\n        changeClass ='orange'\n    } else {\n        changeClass ='blue'\n    }\n    return changeClass\n}\n","import React, { Component } from 'react'\nimport { checkBudget } from '../helper'\n\nclass Remaining extends Component{\n    render(){\n        const { remaining, budget } = this.props\n\n\n\n        return(\n            <div className={`item ${checkBudget(budget, remaining)} lighten-2`}>\n                Restante\n                <span className='value-number'>${remaining}</span>\n            </div>\n        )\n    }\n}\n\nexport default Remaining\n","import React, { Component } from 'react'\nimport Budget from './Budget'\nimport Remaining from './Remaining'\n\nclass BudgetControl extends Component{\n    render(){\n        return(\n            <React.Fragment>\n                <Budget\n                    budget={this.props.budget}\n                />\n                <Remaining\n                    budget={this.props.budget}\n                    remaining={this.props.remaining}\n                />\n            </React.Fragment>\n        )\n    }\n}\n\nexport default BudgetControl\n","import './css/App.css';\n\nimport React, { Component } from 'react';\nimport Header from './components/Header';\nimport ExpensesFrom from './components/ExpensesForm'\nimport ListExpens from './components/ListExpens'\nimport BudgetControl from './components/BudgetControl'\nimport { validateBudget } from './helper'\n\nclass App extends Component {\n\n    state = {\n        budget: '',\n        remaining: '',\n        expens: {}\n    }\n\n    componentDidMount(){\n        this.getBudget()\n    }\n\n    getBudget = () => {\n        let budget = prompt('what is your budget?')\n\n        let result = validateBudget(budget)\n        if(result){\n            this.setState({\n                budget: budget,\n                remaining: budget\n            })\n        }else{\n            this.getBudget()\n        }\n    }\n\n    addExpens = (expen) => {\n        //copia del state actual\n        const expens = {...this.state.expens}\n\n        //agregamos el nuevo gasto\n        expens[`gasto${Date.now()}`] = expen\n\n        //restar Presupuesto\n        this.subtractExpense( expen.cantidadGasto )\n\n        //agregamos al state el nuevo gasto junto con sus anteriores\n        this.setState({\n            //expens: expens or\n            expens\n        })\n\n    }\n\n    //restar del remaining el gasto\n\n    subtractExpense = ( expense ) => {\n        //leer el gasto\n        let subtract = Number(expense)\n\n        //copiar el state\n        let remaining = this.state.remaining\n\n        //resta\n        remaining -= subtract;\n\n        //setear el resultado\n        this.setState({\n            remaining : remaining\n        })\n    }\n\n  render() {\n    return (\n      <div className=\"App container z-depth-2\">\n        <Header\n            title='Gasto Semanal'\n        />\n        <div className=\"row\">\n            <div className='col s6'>\n                <ExpensesFrom\n                    addExpens={this.addExpens}\n                />\n            </div>\n            <div className='col s6'>\n                <ListExpens\n                    expens={this.state.expens}\n                />\n\n                <BudgetControl\n                    budget={this.state.budget}\n                    remaining={this.state.remaining}\n                />\n            </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport 'jquery/dist/jquery.min.js';\nimport 'materialize-css/dist/js/materialize.min.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}